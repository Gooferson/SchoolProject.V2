@page "/gpus/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h1>Create Gpus</h1>

<a href="/gpus/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Gpu
</a>
<br />
<br />

<a href="/gpus/comparisons" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Compare Gpus
</a>
<br />
<br />

@if (Gpus == null)
{
    <div class="alert alert-info">Loading Cpus...</div>
}

else
{
    <table class="table table-responsive">
        <thread>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thread>
        <tbody>
            @foreach (var gpu in Gpus)
            {
                <tr>
                    <td>@gpu.GpuVersion</td>
                    <td>
                        <a href="/gpus/view/@gpu.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/gpus/edit/@gpu.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(gpu.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private List<Gpu>? Gpus;

    protected async override Task OnInitializedAsync()
    {
        Gpus = await _client.GetFromJsonAsync<List<Gpu>>($"{Endpoints.GpusEndpoint}");
    }

    async Task Delete(int GpuId)    
    {
        if (Gpus != null)
        {
            var Gpu = Gpus.First(q => q.Id == GpuId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Gpu.GpuBrand}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.GpusEndpoint}/{GpuId}");
                await OnInitializedAsync();
            }
        }
    }
}